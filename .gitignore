<<<<<<< HEAD
config.json
venv
{chrome_profile_path}
app1.py
dependences.txt
build/
dist/
*.pkg
*.exe



CAMINHOS GABRIEL(WIN)

# Substituindo o caminho do chromedriver diretamente no código
{
    "chrome_profile_path": "C:/Users/Gabriel Souza/AppData/Local/Google/Chrome/User Data/Default",
    "chromedriver_path": "C:/Users/Gabriel Souza/Desktop/WebDriver",
    "base_folder_path": "C:/Users/Gabriel Souza/Desktop/clonegit/Sistema-Hamburgueria-/Comprovantes",
    "dowloands_folder_path": "C:/Users/Gabriel Souza/Downloads",
    "tesseract_path": "C:/Program Files/Tesseract-OCR/tesseract.exe"
}






# Função para limpar a pasta de registros antigos
def limpar_pasta(pasta):
   # if os.path.exists(pasta):
       # for arquivo in os.listdir(pasta):
           # caminho_arquivo = os.path.join(pasta, arquivo)
            #try:
              #  if os.path.isfile(caminho_arquivo):
               #     os.remove(caminho_arquivo)
           # except Exception as e:
               # print(f"⚠️ Erro ao remover {arquivo}: {e}")


# Limpa a pasta antes de iniciar se necessário
limpar_pasta("Comprovantes")
print("🧹 Todos os arquivos da pasta 'Comprovantes' foram removidos!")








# Ajustar a largura das colunas após salvar
                ajustar_largura_colunas(arquivo_excel)

            except Exception as e:
                print(f"⚠️ Erro ao salvar no Excel: {e}")
        else:
            print("🛑 Mensagem já salva, ignorando.")

    time.sleep(5)

limpar_imagens_baixadas(dowloands_folder_path, imagens_baixadas)




#Possível mudança para que comprovantes fora do mes atual nao seja salvo dentro do excel.

from datetime import datetime

def obter_mes_atual():
    """Retorna o número do mês atual como string."""
    return datetime.now().strftime('%m')



    def extrair_mensagens():
    novas_mensagens = []
    mes_atual = obter_mes_atual()

    bolhas = navegador.find_elements(By.XPATH, '//div[contains(@class, "message-in") or contains(@class, "message-out")]')

    ultimo_horario_funcionario = obter_ultimo_horario(xlsx_funcionario)
    ultimo_horario_motoboy = obter_ultimo_horario(xlsx_motoboy)

    for bolha in bolhas:
        try:
            nome = "Você"
            horario = "Desconhecido"

            if "message-in" in bolha.get_attribute("class"):
                nome_elemento = bolha.find_element(By.XPATH, './/div[contains(@class, "copyable-text")]')
                nome = nome_elemento.get_attribute("data-pre-plain-text")
                
                if "[" in nome and "]" in nome:
                    horario = nome.split("]")[0].replace("[", "").strip()
                    nome = nome.split("] ")[-1].strip()
                    
                    # Extraindo o mês da data da mensagem
                    mes_mensagem = horario.split('/')[1] if '/' in horario else "00"
                    if mes_mensagem != mes_atual:
                        continue  # Ignorar mensagens fora do mês atual

            texto_elemento = bolha.find_elements(By.XPATH, './/span[contains(@class, "selectable-text")]')
            texto = " ".join([t.text for t in texto_elemento]).strip()

            if texto.startswith("Transferência realizada"):
                categoria = classificar_categoria(texto)
                valor = extrair_valor(texto)
                identificador = f"{nome}-{horario}-{valor}-{texto}"

                if categoria == "Funcionário" and ultimo_horario_funcionario and horario <= ultimo_horario_funcionario:
                    continue
                if categoria == "Motoboy" and ultimo_horario_motoboy and horario <= ultimo_horario_motoboy:
                    continue

                try:
                    imagem_elemento = bolha.find_element(By.XPATH, './/img[contains(@src, "blob:") or contains(@class, "media")]')
                except NoSuchElementException:
                    imagem_elemento = None

                if imagem_elemento:
                    nome_arquivo = gerar_nome_arquivo_hash(identificador)

                if nome_arquivo not in mensagens_processadas:
                    baixar_imagem(imagem_elemento, nome_arquivo)
                    valor, destinatario = analisar_imagem(nome_arquivo)
                    mensagens_processadas.add(nome_arquivo)
                    novas_mensagens.append((nome, horario, categoria, valor, destinatario, texto))

        except Exception as e:
            print(f"⚠️ Erro ao extrair mensagem: {e}")

    return novas_mensagens
